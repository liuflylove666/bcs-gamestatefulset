/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-services/bcs-clb-controller/pkg/apis/mesh/v1"
	scheme "github.com/Tencent/bk-bcs/bcs-services/bcs-clb-controller/pkg/client/internalclientset/scheme"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// AppSvcsGetter has a method to return a AppSvcInterface.
// A group's client should implement this interface.
type AppSvcsGetter interface {
	AppSvcs(namespace string) AppSvcInterface
}

// AppSvcInterface has methods to work with AppSvc resources.
type AppSvcInterface interface {
	Create(*v1.AppSvc) (*v1.AppSvc, error)
	Update(*v1.AppSvc) (*v1.AppSvc, error)
	UpdateStatus(*v1.AppSvc) (*v1.AppSvc, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.AppSvc, error)
	List(opts meta_v1.ListOptions) (*v1.AppSvcList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AppSvc, err error)
	AppSvcExpansion
}

// appSvcs implements AppSvcInterface
type appSvcs struct {
	client rest.Interface
	ns     string
}

// newAppSvcs returns a AppSvcs
func newAppSvcs(c *MeshV1Client, namespace string) *appSvcs {
	return &appSvcs{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the appSvc, and returns the corresponding appSvc object, and an error if there is any.
func (c *appSvcs) Get(name string, options meta_v1.GetOptions) (result *v1.AppSvc, err error) {
	result = &v1.AppSvc{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("appsvcs").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of AppSvcs that match those selectors.
func (c *appSvcs) List(opts meta_v1.ListOptions) (result *v1.AppSvcList, err error) {
	result = &v1.AppSvcList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("appsvcs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested appSvcs.
func (c *appSvcs) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("appsvcs").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a appSvc and creates it.  Returns the server's representation of the appSvc, and an error, if there is any.
func (c *appSvcs) Create(appSvc *v1.AppSvc) (result *v1.AppSvc, err error) {
	result = &v1.AppSvc{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("appsvcs").
		Body(appSvc).
		Do().
		Into(result)
	return
}

// Update takes the representation of a appSvc and updates it. Returns the server's representation of the appSvc, and an error, if there is any.
func (c *appSvcs) Update(appSvc *v1.AppSvc) (result *v1.AppSvc, err error) {
	result = &v1.AppSvc{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("appsvcs").
		Name(appSvc.Name).
		Body(appSvc).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *appSvcs) UpdateStatus(appSvc *v1.AppSvc) (result *v1.AppSvc, err error) {
	result = &v1.AppSvc{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("appsvcs").
		Name(appSvc.Name).
		SubResource("status").
		Body(appSvc).
		Do().
		Into(result)
	return
}

// Delete takes name of the appSvc and deletes it. Returns an error if one occurs.
func (c *appSvcs) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("appsvcs").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *appSvcs) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("appsvcs").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched appSvc.
func (c *appSvcs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.AppSvc, err error) {
	result = &v1.AppSvc{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("appsvcs").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
