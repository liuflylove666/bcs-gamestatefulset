{
  "swagger": "2.0",
  "info": {
    "title": "蓝鲸服务配置平台Sidecar Instance API说明文档",
    "version": "0.0.1"
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/instance/inject": {
      "post": {
        "summary": "注入实例标签",
        "description": "注入实例标签信息",
        "operationId": "Inject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarInjectResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarInjectReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/v1/instance/ping": {
      "post": {
        "summary": "获取sidecar实例信息",
        "description": "获取sidecar实例信息",
        "operationId": "Ping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarPingResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarPingReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/v1/instance/report-reload": {
      "post": {
        "summary": "上报Reload信息",
        "description": "上报Reload信息",
        "operationId": "ReportReload",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/sidecarReportReloadResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarReportReloadReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    },
    "/v1/instance/watch-reload": {
      "post": {
        "summary": "订阅reload事件",
        "description": "订阅reload事件",
        "operationId": "WatchReload",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/sidecarWatchReloadResp"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/sidecarWatchReloadReq"
            }
          }
        ],
        "tags": [
          "Instance"
        ]
      }
    }
  },
  "definitions": {
    "commonErrCode": {
      "type": "string",
      "enum": [
        "E_OK",
        "E_GW_SYSTEM_UNKONW",
        "E_AS_SYSTEM_UNKONW",
        "E_AS_PARAMS_INVALID",
        "E_AS_AUTH_FAILED",
        "E_AS_NOT_AUTHED",
        "E_TPL_SYSTEM_UNKONW",
        "E_TPL_PARAMS_INVALID",
        "E_TPL_RENDER_CHECK_ERROR",
        "E_TPL_INVALID_TEMPLATE_RULE",
        "E_TPL_INVALID_TEMPLATE_RULE_TYPE",
        "E_TPL_RENDER_FAILED",
        "E_TPL_NO_CLUSTER_TO_RENDER",
        "E_TPL_NO_ZONE_TO_RENDER",
        "E_TPL_NO_TEMPLATE_TO_BIND",
        "E_TPL_NO_VERSION_TO_BIND",
        "E_TPL_NO_APP_TO_BIND",
        "E_TPL_NO_CLUSTER_TO_BIND",
        "E_TPL_NO_ZONE_TO_BIND",
        "E_TPL_CREATE_CFGSET_FAILED",
        "E_TPL_CREATE_COMMIT_FAILED",
        "E_TPL_NO_CFGSET_TO_SYNC",
        "E_TPL_GET_VARS_FAILED",
        "E_BS_SYSTEM_UNKONW",
        "E_BS_PARAMS_INVALID",
        "E_BS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT",
        "E_BS_COMMIT_ALREADY_CANCELED",
        "E_BS_ALREADY_EXISTS",
        "E_BS_ROLLBACK_UNPUBLISHED_RELEASE",
        "E_DM_SYSTEM_UNKONW",
        "E_DM_PARAMS_INVALID",
        "E_DM_NOT_FOUND",
        "E_DM_ALREADY_EXISTS",
        "E_DM_ERR_DBSHARDING",
        "E_DM_DB_EXEC_ERR",
        "E_DM_DB_UPDATE_ERR",
        "E_DM_CFGSET_LOCK_FAILED",
        "E_DM_CFGSET_UNLOCK_FAILED",
        "E_DM_PUBLISH_RELEASE_FAILED",
        "E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT",
        "E_DM_COMMIT_NOT_INIT_STATE",
        "E_DM_RELEASE_CONFIGS_NOT_FOUND",
        "E_GSE_SYSTEM_UNKONW",
        "E_GSE_PARAMS_INVALID",
        "E_GSE_MARSHAL_PUBLISHING_FAILED",
        "E_GSE_PUBLISH_RELEASE_FAILED",
        "E_GSE_ALREADY_PUBLISHED",
        "E_GSE_ALREADY_CANCELED",
        "E_GSE_ALREADY_ROLLBACKED",
        "E_BCS_SYSTEM_UNKONW",
        "E_BCS_PARAMS_INVALID",
        "E_BCS_MARSHAL_PUBLISHING_FAILED",
        "E_BCS_PUBLISH_RELEASE_FAILED",
        "E_BCS_ALREADY_PUBLISHED",
        "E_BCS_ALREADY_CANCELED",
        "E_BCS_ALREADY_ROLLBACKED",
        "E_CONNS_SYSTEM_UNKONW",
        "E_CONNS_PARAMS_INVALID",
        "E_CONNS_SCHEDULE_RES_FAILED",
        "E_ITG_SYSTEM_UNKONW",
        "E_ITG_PARAMS_INVALID",
        "E_ITG_METADATA_INVALID",
        "E_ITG_UNKNOW_METADATA_KIND",
        "E_ITG_UNKNOW_METADATA_OP",
        "E_ITG_CREATE_STRATEGY_FAILED",
        "E_ITG_CONSTRUCT_CLUSTER_FAILED",
        "E_ITG_CONSTRUCT_ZONE_FAILED",
        "E_TS_SYSTEM_UNKONW",
        "E_TS_PARAMS_INVALID",
        "E_TS_PUBLISH_RELEASE_FAILED",
        "E_IS_SYSTEM_UNKONW",
        "E_IS_PARAMS_INVALID"
      ],
      "default": "E_OK",
      "description": "- E_OK: 0 成功\n - E_GW_SYSTEM_UNKONW: 1000 网关服务, 节点调用失败\n - E_AS_SYSTEM_UNKONW: 2000 接入服务, 节点调用失败\n - E_AS_PARAMS_INVALID: 2001 接入服务, 参数校验失败\n - E_AS_AUTH_FAILED: 2002 接入服务, 认证校验失败\n - E_AS_NOT_AUTHED: 2003 接入服务, 未授权的操作\n - E_TPL_SYSTEM_UNKONW: 3000 模板服务, 节点调用失败\n - E_TPL_PARAMS_INVALID: 3001 模板服务, 参数校验失败\n - E_TPL_RENDER_CHECK_ERROR: 3002 模板服务, 渲染前置检查失败，检查模板和模板规则内容是否正确\n - E_TPL_INVALID_TEMPLATE_RULE: 3003 模板服务, 渲染规则非法\n - E_TPL_INVALID_TEMPLATE_RULE_TYPE: 3004 模板服务, 渲染规则类型非法\n - E_TPL_RENDER_FAILED: 3005 模板服务, 渲染失败\n - E_TPL_NO_CLUSTER_TO_RENDER: 3006 模板服务, 预览渲染失败, 集群信息未知\n - E_TPL_NO_ZONE_TO_RENDER: 3007 模板服务, 预览渲染失败, 大区信息未知\n - E_TPL_NO_TEMPLATE_TO_BIND: 3008 模版服务, 创建绑定失败, 模版信息未知\n - E_TPL_NO_VERSION_TO_BIND: 3009 模版服务, 创建绑定失败, 模版版本信息未知\n - E_TPL_NO_APP_TO_BIND: 3010 模版服务, 创建绑定失败, App信息未知\n - E_TPL_NO_CLUSTER_TO_BIND: 3011 模版服务, 创建绑定失败, 集群信息未知\n - E_TPL_NO_ZONE_TO_BIND: 3012 模版服务, 创建绑定失败, 大区信息未知\n - E_TPL_CREATE_CFGSET_FAILED: 3013 模版服务, 创建绑定失败，创建configSet失败\n - E_TPL_CREATE_COMMIT_FAILED: 3014 模版服务, 创建绑定失败, 创建commit失败\n - E_TPL_NO_CFGSET_TO_SYNC: 3015 模版服务, 更新绑定失败, configSet信息未知\n - E_TPL_GET_VARS_FAILED: 3016 模版服务, 获取变量失败\n - E_BS_SYSTEM_UNKONW: 4000 业务逻辑服务, 节点调用失败\n - E_BS_PARAMS_INVALID: 4001 业务逻辑服务, 参数校验失败\n - E_BS_CREATE_RELEASE_WITH_UNCONFIRMED_COMMIT: 4002 业务逻辑服务, 无法根据未提交确认的Commit创建配置发布版本\n - E_BS_COMMIT_ALREADY_CANCELED: 4003 业务逻辑服务, 该Commit已撤销，无法再进行Confirm操作\n - E_BS_ALREADY_EXISTS: 4004 业务逻辑服务, 目标资源已存在无法重复创建\n - E_BS_ROLLBACK_UNPUBLISHED_RELEASE: 4005 业务逻辑服务, 无法回滚一个未发布的版本\n - E_DM_SYSTEM_UNKONW: 5000 数据管理服务, 通用未知异常\n - E_DM_PARAMS_INVALID: 5001 数据管理服务, 参数校验失败\n - E_DM_NOT_FOUND: 5002 数据管理服务, 指定目标对象不存在\n - E_DM_ALREADY_EXISTS: 5003 数据管理服务, 指定目标对象已存在\n - E_DM_ERR_DBSHARDING: 5004 数据管理服务, 获取数据存储分片失败\n - E_DM_DB_EXEC_ERR: 5005 数据管理服务, 数据操作执行异常\n - E_DM_DB_UPDATE_ERR: 5006 数据管理服务, 更新失败, 无满足限定条件的目标对象\n - E_DM_CFGSET_LOCK_FAILED: 5007 数据管理服务, 加锁指定配置集合失败\n - E_DM_CFGSET_UNLOCK_FAILED: 5008 数据管理服务, 解锁指定配置集合失败\n - E_DM_PUBLISH_RELEASE_FAILED: 5009 数据管理服务, 配置版本发布失败，无满足限定条件的目标版本对象\n - E_DM_ALREADY_EXISTS_UNCONFIRMED_COMMIT: 5010 数据管理服务, 存在未完结的Commit提交，无法重新创建Commit\n - E_DM_COMMIT_NOT_INIT_STATE: 5011 数据管理服务, 关联的Commit已提交或已撤销，无法对其配置实体内容再次修改\n - E_DM_RELEASE_CONFIGS_NOT_FOUND: 5012 数据管理服务, 无法找到指定配置版本的实际配置内如（发布策略触达范围有误或渲染规则有误）\n - E_GSE_SYSTEM_UNKONW: 6000 GSE控制器, 节点调用失败\n - E_GSE_PARAMS_INVALID: 6001 GSE控制器, 参数校验失败\n - E_GSE_MARSHAL_PUBLISHING_FAILED: 6002 BCS控制器, 配置版本发布消息解析失败\n - E_GSE_PUBLISH_RELEASE_FAILED: 6003 GSE控制器, 配置版本任务发布失败\n - E_GSE_ALREADY_PUBLISHED: 6004 BCS控制器, 配置版本已执行发布，请勿重复执行\n - E_GSE_ALREADY_CANCELED: 6005 BCS控制器, 配置版本已撤销，无法执行发布\n - E_GSE_ALREADY_ROLLBACKED: 6006 BCS控制器, 配置版本已回滚\n - E_BCS_SYSTEM_UNKONW: 7000 BCS控制器, 节点调用失败\n - E_BCS_PARAMS_INVALID: 7001 BCS控制器, 参数校验失败\n - E_BCS_MARSHAL_PUBLISHING_FAILED: 7002 BCS控制器, 配置版本发布消息解析失败\n - E_BCS_PUBLISH_RELEASE_FAILED: 7003 BCS控制器, 广播配置版本发布消息失败\n - E_BCS_ALREADY_PUBLISHED: 7004 BCS控制器, 配置版本已执行发布，请勿重复执行\n - E_BCS_ALREADY_CANCELED: 7005 BCS控制器, 配置版本已撤销，无法执行发布\n - E_BCS_ALREADY_ROLLBACKED: 7006 BCS控制器, 配置版本已回滚\n - E_CONNS_SYSTEM_UNKONW: 8000 会话链接服务, 节点调用失败\n - E_CONNS_PARAMS_INVALID: 8001 会话链接服务, 参数校验失败\n - E_CONNS_SCHEDULE_RES_FAILED: 8002 会话链接服务, BCS sidecar接入调度失败\n - E_ITG_SYSTEM_UNKONW: 9000 逻辑集成服务, 节点调用失败\n - E_ITG_PARAMS_INVALID: 9001 逻辑集成服务, 参数校验失败\n - E_ITG_METADATA_INVALID: 9002 逻辑集成服务, 操作集合描述文件解析失败\n - E_ITG_UNKNOW_METADATA_KIND: 9003 逻辑集成服务, 未知操作集合描述类型\n - E_ITG_UNKNOW_METADATA_OP: 9004 逻辑集成服务, 未知操作集合描述类型\n - E_ITG_CREATE_STRATEGY_FAILED: 9005 逻辑集成服务, 创建版本发布策略失败\n - E_ITG_CONSTRUCT_CLUSTER_FAILED: 9006 逻辑集成服务, 创建集群结构失败\n - E_ITG_CONSTRUCT_ZONE_FAILED: 9007 逻辑集成服务, 创建大区结构失败\n - E_TS_SYSTEM_UNKONW: 10000 通道服务, 节点调用失败\n - E_TS_PARAMS_INVALID: 10001 通道服务, 参数校验失败\n - E_TS_PUBLISH_RELEASE_FAILED: 10002 通道服务, 配置版本发布失败\n - E_IS_SYSTEM_UNKONW: 11000 实例服务, 节点调用失败\n - E_IS_PARAMS_INVALID: 11001 实例服务, 参数校验失败",
      "title": "ErrCode 错误码"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "sidecarConfigsMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "配置名称",
          "maxLength": 64
        },
        "fpath": {
          "type": "string",
          "title": "配置子路径",
          "maxLength": 1024
        }
      },
      "description": "需要reload的配置信息描述",
      "title": "ConfigsMetadata"
    },
    "sidecarInjectReq": {
      "type": "object",
      "example": {
        "seq": "1",
        "businessName": "business",
        "appName": "app",
        "labels": {
          "k1": "v1",
          "k2": "v2"
        }
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        },
        "businessName": {
          "type": "string",
          "title": "业务名称",
          "maxLength": 64
        },
        "appName": {
          "type": "string",
          "title": "应用名称",
          "maxLength": 64
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "实例标签信息注入请求",
      "title": "InjectReq",
      "required": [
        "seq",
        "businessName",
        "appName",
        "path",
        "labels"
      ]
    },
    "sidecarInjectResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "errCode": 0,
        "errMsg": "OK"
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "errCode": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "errMsg": {
          "type": "string",
          "title": "错误描述"
        }
      },
      "description": "实例标签信息注入响应",
      "title": "InjectResp",
      "required": [
        "seq",
        "errCode",
        "errMsg"
      ]
    },
    "sidecarModInfo": {
      "type": "object",
      "properties": {
        "businessName": {
          "type": "string",
          "title": "所属业务名称",
          "maxLength": 64
        },
        "appName": {
          "type": "string",
          "title": "所属应用名称",
          "maxLength": 64
        },
        "clusterName": {
          "type": "string",
          "title": "所属集群名称",
          "maxLength": 64
        },
        "zoneName": {
          "type": "string",
          "title": "所属大区名称",
          "maxLength": 64
        },
        "dc": {
          "type": "string",
          "title": "物理机房标识",
          "maxLength": 64
        },
        "IP": {
          "type": "string",
          "title": "IP",
          "maxLength": 32
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        },
        "isReady": {
          "type": "boolean",
          "format": "boolean",
          "description": "在通常情况下，需要业务方完成注入后App才会就绪拉取配置内容，业务方需要保证注入完成使得状态为true",
          "title": "该App模块是否已就绪"
        }
      },
      "description": "Sidecar实例中承载处理的应用模块信息",
      "title": "ModInfo"
    },
    "sidecarPingReq": {
      "type": "object",
      "example": {
        "seq": "1"
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        }
      },
      "description": "Ping请求",
      "title": "PingReq",
      "required": [
        "seq"
      ]
    },
    "sidecarPingResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "errCode": 0,
        "errMsg": "OK",
        "mods": [
          {
            "businessName": "business",
            "appName": "app",
            "clusterName": "cluster",
            "zone": "zone",
            "dc": "dc01",
            "IP": "127.0.0.1",
            "labels": {
              "k1": "v1",
              "k2": "v2"
            },
            "path": "/data/bk-bscp/"
          }
        ]
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "errCode": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "errMsg": {
          "type": "string",
          "title": "错误描述"
        },
        "mods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sidecarModInfo"
          },
          "description": "成功后返回实例信息(单Sidecar可以承载处理多个App)",
          "title": "实例信息"
        }
      },
      "description": "Ping响应",
      "title": "PingResp",
      "required": [
        "seq",
        "errCode",
        "errMsg"
      ]
    },
    "sidecarReportReloadReq": {
      "type": "object",
      "example": {
        "seq": "1",
        "businessName": "business",
        "appName": "app",
        "releaseid": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "multiReleaseid": "0b67a798-e9c1-11e9-8c23-525400f99278",
        "reloadTime": "2019-08-29 17:18:22",
        "reloadCode": 0,
        "reloadMsg": "SUCCESS"
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        },
        "businessName": {
          "type": "string",
          "title": "业务名称",
          "maxLength": 64
        },
        "appName": {
          "type": "string",
          "title": "应用名称",
          "maxLength": 64
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        },
        "releaseid": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "已执行生效的发布版本ID",
          "maxLength": 64
        },
        "multiReleaseid": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "已执行生效的发布版本ID(组模式)",
          "maxLength": 64
        },
        "reloadTime": {
          "type": "string",
          "description": "版本reload时间, 2019-08-29 17:18:22",
          "title": "版本Reload时间"
        },
        "reloadCode": {
          "type": "integer",
          "format": "int32",
          "title": "Reload执行错误码"
        },
        "reloadMsg": {
          "type": "string",
          "title": "Reload执行错误信息"
        }
      },
      "description": "Reload执行上报请求",
      "title": "ReportReloadReq",
      "required": [
        "seq",
        "businessName",
        "appName",
        "path",
        "reloadTime",
        "reloadCodereloadMsg"
      ]
    },
    "sidecarReportReloadResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "errCode": 0,
        "errMsg": "OK"
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "errCode": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "errMsg": {
          "type": "string",
          "title": "错误描述"
        }
      },
      "description": "Reload执行上报响应",
      "title": "ReportReloadResp",
      "required": [
        "seq",
        "errCode",
        "errMsg"
      ]
    },
    "sidecarWatchReloadReq": {
      "type": "object",
      "example": {
        "seq": "1",
        "businessName": "business",
        "appName": "app"
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "调用方的请求序列号，用于指定时间内标识某次请求",
          "title": "请求序列号"
        },
        "businessName": {
          "type": "string",
          "title": "业务名称",
          "maxLength": 64
        },
        "appName": {
          "type": "string",
          "title": "应用名称",
          "maxLength": 64
        },
        "path": {
          "type": "string",
          "title": "应用在sidecar的配置缓存路径",
          "maxLength": 128
        }
      },
      "description": "订阅Reload事件请求",
      "title": "WatchReloadReq",
      "required": [
        "seq",
        "businessName",
        "appName",
        "path"
      ]
    },
    "sidecarWatchReloadResp": {
      "type": "object",
      "example": {
        "seq": "1",
        "errCode": 0,
        "errMsg": "OK",
        "releaseid": "f879ab8f-c7e5-11e9-9dc5-525400f99278",
        "multiReleaseid": "f879a282-c7e5-11e9-9dc5-525400f99278",
        "releaseName": "new release",
        "reloadType": 0,
        "rootPath": "/data/bk-bscp",
        "metadatas": [
          {
            "Name": "server.yaml",
            "Fpath": "/etc"
          }
        ]
      },
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "description": "响应序列号, 与调用方的请求序列号一致，用于指定时间内标识某次请求",
          "title": "响应序列号"
        },
        "errCode": {
          "$ref": "#/definitions/commonErrCode",
          "title": "错误码"
        },
        "errMsg": {
          "type": "string",
          "title": "错误描述"
        },
        "releaseid": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "新发布版本ID",
          "maxLength": 64
        },
        "multiReleaseid": {
          "type": "string",
          "description": "releaseid和multiReleaseid互斥存在，通常差量reload机制下只存在multiReleaseid",
          "title": "新发布版本ID(组模式)",
          "maxLength": 64
        },
        "releaseName": {
          "type": "string",
          "title": "新发布版本名称",
          "maxLength": 64
        },
        "reloadType": {
          "type": "integer",
          "format": "int32",
          "description": "0：发布更新  1：回滚  主要是用于描述事件背景",
          "title": "reload类型"
        },
        "rootPath": {
          "type": "string",
          "description": "只是sidecar容器内的缓存路径，通过volums后在业务容器中位置并不一定相同",
          "title": "缓存根目录"
        },
        "metadatas": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sidecarConfigsMetadata"
          },
          "description": "根据该信息到业务容器侧的volums目录中拿取指定配置数据做更新",
          "title": "需要做reload的配置信息"
        }
      },
      "description": "订阅Reload事件流式响应",
      "title": "WatchReloadResp",
      "required": [
        "seq",
        "errCode",
        "errMsg"
      ]
    }
  },
  "x-stream-definitions": {
    "sidecarWatchReloadResp": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/sidecarWatchReloadResp"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of sidecarWatchReloadResp"
    }
  }
}
