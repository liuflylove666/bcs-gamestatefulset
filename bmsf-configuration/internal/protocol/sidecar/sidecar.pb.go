// Code generated by protoc-gen-go.
// source: sidecar.proto
// DO NOT EDIT!

/*
Package sidecar is a generated protocol buffer package.

It is generated from these files:
	sidecar.proto

It has these top-level messages:
	ModInfo
	ConfigsMetadata
	PingReq
	PingResp
	InjectReq
	InjectResp
	WatchReloadReq
	WatchReloadResp
	ReportReloadReq
	ReportReloadResp
*/
package sidecar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "bk-bscp/internal/protocol/common"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ModInfo struct {
	BusinessName string            `protobuf:"bytes,1,opt,name=businessName" json:"businessName,omitempty"`
	AppName      string            `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	ClusterName  string            `protobuf:"bytes,3,opt,name=clusterName" json:"clusterName,omitempty"`
	ZoneName     string            `protobuf:"bytes,4,opt,name=zoneName" json:"zoneName,omitempty"`
	Dc           string            `protobuf:"bytes,5,opt,name=dc" json:"dc,omitempty"`
	IP           string            `protobuf:"bytes,6,opt,name=IP" json:"IP,omitempty"`
	Labels       map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Path         string            `protobuf:"bytes,8,opt,name=path" json:"path,omitempty"`
	IsReady      bool              `protobuf:"varint,9,opt,name=isReady" json:"isReady,omitempty"`
}

func (m *ModInfo) Reset()                    { *m = ModInfo{} }
func (m *ModInfo) String() string            { return proto.CompactTextString(m) }
func (*ModInfo) ProtoMessage()               {}
func (*ModInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ModInfo) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *ModInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ModInfo) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ModInfo) GetZoneName() string {
	if m != nil {
		return m.ZoneName
	}
	return ""
}

func (m *ModInfo) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

func (m *ModInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ModInfo) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ModInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ModInfo) GetIsReady() bool {
	if m != nil {
		return m.IsReady
	}
	return false
}

type ConfigsMetadata struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Fpath string `protobuf:"bytes,2,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *ConfigsMetadata) Reset()                    { *m = ConfigsMetadata{} }
func (m *ConfigsMetadata) String() string            { return proto.CompactTextString(m) }
func (*ConfigsMetadata) ProtoMessage()               {}
func (*ConfigsMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigsMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigsMetadata) GetFpath() string {
	if m != nil {
		return m.Fpath
	}
	return ""
}

type PingReq struct {
	Seq uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

type PingResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Mods    []*ModInfo     `protobuf:"bytes,4,rep,name=mods" json:"mods,omitempty"`
}

func (m *PingResp) Reset()                    { *m = PingResp{} }
func (m *PingResp) String() string            { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()               {}
func (*PingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PingResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *PingResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PingResp) GetMods() []*ModInfo {
	if m != nil {
		return m.Mods
	}
	return nil
}

type InjectReq struct {
	Seq          uint64            `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	BusinessName string            `protobuf:"bytes,2,opt,name=businessName" json:"businessName,omitempty"`
	AppName      string            `protobuf:"bytes,3,opt,name=appName" json:"appName,omitempty"`
	Path         string            `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Labels       map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InjectReq) Reset()                    { *m = InjectReq{} }
func (m *InjectReq) String() string            { return proto.CompactTextString(m) }
func (*InjectReq) ProtoMessage()               {}
func (*InjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InjectReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *InjectReq) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *InjectReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *InjectReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *InjectReq) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type InjectResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *InjectResp) Reset()                    { *m = InjectResp{} }
func (m *InjectResp) String() string            { return proto.CompactTextString(m) }
func (*InjectResp) ProtoMessage()               {}
func (*InjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InjectResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *InjectResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *InjectResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type WatchReloadReq struct {
	Seq          uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	BusinessName string `protobuf:"bytes,2,opt,name=businessName" json:"businessName,omitempty"`
	AppName      string `protobuf:"bytes,3,opt,name=appName" json:"appName,omitempty"`
	Path         string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
}

func (m *WatchReloadReq) Reset()                    { *m = WatchReloadReq{} }
func (m *WatchReloadReq) String() string            { return proto.CompactTextString(m) }
func (*WatchReloadReq) ProtoMessage()               {}
func (*WatchReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WatchReloadReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *WatchReloadReq) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *WatchReloadReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *WatchReloadReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type WatchReloadResp struct {
	Seq            uint64             `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode        common.ErrCode     `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg         string             `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
	Releaseid      string             `protobuf:"bytes,4,opt,name=releaseid" json:"releaseid,omitempty"`
	MultiReleaseid string             `protobuf:"bytes,5,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	ReleaseName    string             `protobuf:"bytes,6,opt,name=releaseName" json:"releaseName,omitempty"`
	ReloadType     int32              `protobuf:"varint,7,opt,name=reloadType" json:"reloadType,omitempty"`
	RootPath       string             `protobuf:"bytes,8,opt,name=rootPath" json:"rootPath,omitempty"`
	Metadatas      []*ConfigsMetadata `protobuf:"bytes,9,rep,name=metadatas" json:"metadatas,omitempty"`
}

func (m *WatchReloadResp) Reset()                    { *m = WatchReloadResp{} }
func (m *WatchReloadResp) String() string            { return proto.CompactTextString(m) }
func (*WatchReloadResp) ProtoMessage()               {}
func (*WatchReloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WatchReloadResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *WatchReloadResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *WatchReloadResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *WatchReloadResp) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *WatchReloadResp) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *WatchReloadResp) GetReleaseName() string {
	if m != nil {
		return m.ReleaseName
	}
	return ""
}

func (m *WatchReloadResp) GetReloadType() int32 {
	if m != nil {
		return m.ReloadType
	}
	return 0
}

func (m *WatchReloadResp) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

func (m *WatchReloadResp) GetMetadatas() []*ConfigsMetadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type ReportReloadReq struct {
	Seq            uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	BusinessName   string `protobuf:"bytes,2,opt,name=businessName" json:"businessName,omitempty"`
	AppName        string `protobuf:"bytes,3,opt,name=appName" json:"appName,omitempty"`
	Path           string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Releaseid      string `protobuf:"bytes,5,opt,name=releaseid" json:"releaseid,omitempty"`
	MultiReleaseid string `protobuf:"bytes,6,opt,name=multiReleaseid" json:"multiReleaseid,omitempty"`
	ReloadTime     string `protobuf:"bytes,7,opt,name=reloadTime" json:"reloadTime,omitempty"`
	ReloadCode     int32  `protobuf:"varint,8,opt,name=reloadCode" json:"reloadCode,omitempty"`
	ReloadMsg      string `protobuf:"bytes,9,opt,name=reloadMsg" json:"reloadMsg,omitempty"`
}

func (m *ReportReloadReq) Reset()                    { *m = ReportReloadReq{} }
func (m *ReportReloadReq) String() string            { return proto.CompactTextString(m) }
func (*ReportReloadReq) ProtoMessage()               {}
func (*ReportReloadReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReportReloadReq) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReportReloadReq) GetBusinessName() string {
	if m != nil {
		return m.BusinessName
	}
	return ""
}

func (m *ReportReloadReq) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ReportReloadReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ReportReloadReq) GetReleaseid() string {
	if m != nil {
		return m.Releaseid
	}
	return ""
}

func (m *ReportReloadReq) GetMultiReleaseid() string {
	if m != nil {
		return m.MultiReleaseid
	}
	return ""
}

func (m *ReportReloadReq) GetReloadTime() string {
	if m != nil {
		return m.ReloadTime
	}
	return ""
}

func (m *ReportReloadReq) GetReloadCode() int32 {
	if m != nil {
		return m.ReloadCode
	}
	return 0
}

func (m *ReportReloadReq) GetReloadMsg() string {
	if m != nil {
		return m.ReloadMsg
	}
	return ""
}

type ReportReloadResp struct {
	Seq     uint64         `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	ErrCode common.ErrCode `protobuf:"varint,2,opt,name=errCode,enum=common.ErrCode" json:"errCode,omitempty"`
	ErrMsg  string         `protobuf:"bytes,3,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *ReportReloadResp) Reset()                    { *m = ReportReloadResp{} }
func (m *ReportReloadResp) String() string            { return proto.CompactTextString(m) }
func (*ReportReloadResp) ProtoMessage()               {}
func (*ReportReloadResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReportReloadResp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ReportReloadResp) GetErrCode() common.ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return common.ErrCode_E_OK
}

func (m *ReportReloadResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*ModInfo)(nil), "sidecar.ModInfo")
	proto.RegisterType((*ConfigsMetadata)(nil), "sidecar.ConfigsMetadata")
	proto.RegisterType((*PingReq)(nil), "sidecar.PingReq")
	proto.RegisterType((*PingResp)(nil), "sidecar.PingResp")
	proto.RegisterType((*InjectReq)(nil), "sidecar.InjectReq")
	proto.RegisterType((*InjectResp)(nil), "sidecar.InjectResp")
	proto.RegisterType((*WatchReloadReq)(nil), "sidecar.WatchReloadReq")
	proto.RegisterType((*WatchReloadResp)(nil), "sidecar.WatchReloadResp")
	proto.RegisterType((*ReportReloadReq)(nil), "sidecar.ReportReloadReq")
	proto.RegisterType((*ReportReloadResp)(nil), "sidecar.ReportReloadResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Instance service

type InstanceClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Inject(ctx context.Context, in *InjectReq, opts ...grpc.CallOption) (*InjectResp, error)
	WatchReload(ctx context.Context, in *WatchReloadReq, opts ...grpc.CallOption) (Instance_WatchReloadClient, error)
	ReportReload(ctx context.Context, in *ReportReloadReq, opts ...grpc.CallOption) (*ReportReloadResp, error)
}

type instanceClient struct {
	cc *grpc.ClientConn
}

func NewInstanceClient(cc *grpc.ClientConn) InstanceClient {
	return &instanceClient{cc}
}

func (c *instanceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := grpc.Invoke(ctx, "/sidecar.Instance/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) Inject(ctx context.Context, in *InjectReq, opts ...grpc.CallOption) (*InjectResp, error) {
	out := new(InjectResp)
	err := grpc.Invoke(ctx, "/sidecar.Instance/Inject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceClient) WatchReload(ctx context.Context, in *WatchReloadReq, opts ...grpc.CallOption) (Instance_WatchReloadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Instance_serviceDesc.Streams[0], c.cc, "/sidecar.Instance/WatchReload", opts...)
	if err != nil {
		return nil, err
	}
	x := &instanceWatchReloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Instance_WatchReloadClient interface {
	Recv() (*WatchReloadResp, error)
	grpc.ClientStream
}

type instanceWatchReloadClient struct {
	grpc.ClientStream
}

func (x *instanceWatchReloadClient) Recv() (*WatchReloadResp, error) {
	m := new(WatchReloadResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *instanceClient) ReportReload(ctx context.Context, in *ReportReloadReq, opts ...grpc.CallOption) (*ReportReloadResp, error) {
	out := new(ReportReloadResp)
	err := grpc.Invoke(ctx, "/sidecar.Instance/ReportReload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Instance service

type InstanceServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	Inject(context.Context, *InjectReq) (*InjectResp, error)
	WatchReload(*WatchReloadReq, Instance_WatchReloadServer) error
	ReportReload(context.Context, *ReportReloadReq) (*ReportReloadResp, error)
}

func RegisterInstanceServer(s *grpc.Server, srv InstanceServer) {
	s.RegisterService(&_Instance_serviceDesc, srv)
}

func _Instance_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.Instance/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_Inject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).Inject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.Instance/Inject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).Inject(ctx, req.(*InjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instance_WatchReload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchReloadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstanceServer).WatchReload(m, &instanceWatchReloadServer{stream})
}

type Instance_WatchReloadServer interface {
	Send(*WatchReloadResp) error
	grpc.ServerStream
}

type instanceWatchReloadServer struct {
	grpc.ServerStream
}

func (x *instanceWatchReloadServer) Send(m *WatchReloadResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Instance_ReportReload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServer).ReportReload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.Instance/ReportReload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServer).ReportReload(ctx, req.(*ReportReloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Instance_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sidecar.Instance",
	HandlerType: (*InstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Instance_Ping_Handler,
		},
		{
			MethodName: "Inject",
			Handler:    _Instance_Inject_Handler,
		},
		{
			MethodName: "ReportReload",
			Handler:    _Instance_ReportReload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchReload",
			Handler:       _Instance_WatchReload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sidecar.proto",
}

func init() { proto.RegisterFile("sidecar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x59, 0xdb, 0x73, 0x13, 0xd7,
	0x19, 0x9f, 0x15, 0xbe, 0x1e, 0x13, 0x0c, 0x87, 0x5c, 0x84, 0x42, 0xa9, 0xb2, 0x9d, 0x4e, 0xcc,
	0x06, 0x59, 0xd6, 0x26, 0xc4, 0xb6, 0xd2, 0xa4, 0xac, 0x29, 0x9d, 0x3a, 0x29, 0xc1, 0xb3, 0x24,
	0xd3, 0x4e, 0x33, 0x9d, 0x74, 0x2d, 0x2d, 0x8e, 0x82, 0x2c, 0x29, 0x5a, 0x99, 0x4b, 0x19, 0xcf,
	0xd8, 0xc1, 0x57, 0x7c, 0x91, 0xb2, 0xd8, 0xc6, 0xc8, 0x0e, 0xe0, 0xd4, 0x80, 0x43, 0x82, 0x65,
	0x12, 0x82, 0xe5, 0x0b, 0x78, 0x26, 0x7d, 0xeb, 0xa3, 0xfb, 0x27, 0x54, 0xe7, 0x48, 0x7a, 0x68,
	0xe9, 0xb4, 0x0f, 0x99, 0xe9, 0x4c, 0x67, 0x3a, 0x7b, 0xce, 0x4a, 0x5a, 0x49, 0x26, 0x2e, 0x49,
	0xda, 0x3c, 0x24, 0x4f, 0xf6, 0x7e, 0xe7, 0xfb, 0xce, 0xf9, 0x9d, 0xef, 0xfe, 0x1d, 0x81, 0x47,
	0x14, 0x8f, 0x5b, 0x76, 0x49, 0xc1, 0xda, 0x40, 0xd0, 0x1f, 0xf2, 0xc3, 0x72, 0xfd, 0xd3, 0x62,
	0x6b, 0x3d, 0x6e, 0x6b, 0x55, 0x5c, 0x01, 0xbb, 0xc7, 0x17, 0x92, 0x83, 0x3e, 0xc9, 0x6b, 0x27,
	0x0c, 0x2e, 0xbf, 0xd7, 0xee, 0xf2, 0xb7, 0xb7, 0xfb, 0x7d, 0xfa, 0x1f, 0x2a, 0x67, 0xd9, 0xdd,
	0xe6, 0xf7, 0xb7, 0x79, 0x65, 0xbb, 0x14, 0xf0, 0xd8, 0x25, 0x9f, 0xcf, 0x1f, 0x92, 0x42, 0x1e,
	0xbf, 0x4f, 0xd1, 0x57, 0xf7, 0x51, 0x59, 0x5b, 0x9b, 0xec, 0xb3, 0x29, 0x27, 0xa5, 0xb6, 0x36,
	0x39, 0x68, 0xf7, 0x07, 0x08, 0x47, 0x31, 0x37, 0x7b, 0xa1, 0x0c, 0x94, 0x1f, 0xf6, 0xbb, 0x9b,
	0x7d, 0xc7, 0xfc, 0xf0, 0x45, 0xb0, 0xb5, 0xb5, 0x43, 0xf1, 0xf8, 0x64, 0x45, 0x79, 0x55, 0x6a,
	0x97, 0xcd, 0x8c, 0x95, 0xa9, 0xa9, 0x6c, 0xda, 0xa5, 0x0a, 0x8f, 0x73, 0x10, 0x0f, 0x76, 0xa1,
	0x5b, 0x97, 0x12, 0xf1, 0x28, 0x3a, 0x37, 0x83, 0x22, 0x23, 0xc9, 0xeb, 0x0b, 0xa7, 0x0e, 0x88,
	0x79, 0xec, 0xf0, 0x59, 0x50, 0x2e, 0x05, 0x02, 0x44, 0xd2, 0x54, 0x24, 0x89, 0x96, 0xc7, 0x92,
	0x63, 0x73, 0x59, 0xc9, 0x0c, 0x27, 0x7c, 0x01, 0x54, 0xb9, 0xbc, 0x1d, 0x4a, 0x48, 0x0e, 0x12,
	0xc1, 0x2d, 0x45, 0x82, 0xe9, 0xa9, 0xbe, 0xe4, 0xbd, 0xd9, 0xac, 0xa0, 0x91, 0x1b, 0xee, 0x07,
	0x15, 0xbf, 0xf7, 0xfb, 0x64, 0x22, 0x59, 0x52, 0x7c, 0xe4, 0xec, 0x75, 0x34, 0xbc, 0x9c, 0x95,
	0xcc, 0xb2, 0xc2, 0xbd, 0xc0, 0xe4, 0x76, 0x99, 0x4b, 0x0d, 0x02, 0xc9, 0xc1, 0x0f, 0x93, 0x91,
	0x3e, 0x3c, 0xbd, 0x8c, 0x07, 0xd6, 0xf0, 0x95, 0xfe, 0x54, 0xac, 0xef, 0xd4, 0x01, 0xd1, 0xe4,
	0x76, 0xc1, 0x5d, 0xc0, 0xd4, 0xdc, 0x62, 0x2e, 0x23, 0xac, 0x95, 0xaa, 0x50, 0xc6, 0x99, 0x9a,
	0x5b, 0x4e, 0x59, 0x45, 0x53, 0x73, 0x0b, 0x6c, 0x01, 0x65, 0x5e, 0xa9, 0x55, 0xf6, 0x2a, 0xe6,
	0x72, 0xeb, 0x96, 0x9a, 0x2a, 0x7e, 0x77, 0x6d, 0xc6, 0xba, 0xba, 0x3e, 0x6b, 0x7f, 0x49, 0x96,
	0x0f, 0xf9, 0x42, 0xc1, 0xd3, 0x4d, 0x16, 0x55, 0x78, 0x82, 0x83, 0xba, 0x16, 0xe6, 0x2f, 0x25,
	0xee, 0x0d, 0x51, 0xe1, 0x53, 0x5d, 0x15, 0xa2, 0xbe, 0x0f, 0x14, 0x40, 0x49, 0x40, 0x0a, 0xbd,
	0x65, 0xae, 0x20, 0xc7, 0xd9, 0x54, 0x81, 0xe3, 0x7e, 0xac, 0x4b, 0x4c, 0xcf, 0xe9, 0x9b, 0x27,
	0xa3, 0x3d, 0xe9, 0xde, 0x91, 0xe4, 0xdd, 0xf9, 0xe4, 0xea, 0x79, 0x74, 0x73, 0x32, 0xb5, 0x18,
	0x43, 0xf7, 0x7a, 0x4e, 0x75, 0x31, 0x22, 0x11, 0x85, 0x7f, 0x62, 0x40, 0xb9, 0x47, 0x11, 0x65,
	0xc9, 0x7d, 0xda, 0x5c, 0x69, 0x65, 0x6a, 0x2a, 0x9a, 0x62, 0x8c, 0x2a, 0x7c, 0xc4, 0x70, 0x4f,
	0xa6, 0x62, 0x57, 0x85, 0x40, 0x00, 0xcf, 0xcd, 0xa0, 0xf7, 0x2f, 0xe0, 0xc9, 0x18, 0x8a, 0x5c,
	0x43, 0x8b, 0x9f, 0xa0, 0x85, 0x5b, 0xc9, 0x95, 0x1b, 0xfc, 0x10, 0x83, 0xa6, 0xe7, 0xd2, 0x5d,
	0x51, 0x14, 0x8f, 0xe3, 0xb3, 0xbd, 0xa8, 0xef, 0xb3, 0x44, 0x7c, 0xe8, 0xfe, 0xea, 0x70, 0x7a,
	0xba, 0x2b, 0x75, 0xad, 0x9b, 0xda, 0x1c, 0x4f, 0x2c, 0xa1, 0xf9, 0x61, 0x3c, 0x10, 0xc1, 0x9f,
	0xce, 0xa1, 0xde, 0xab, 0x28, 0x32, 0xaa, 0xed, 0x36, 0x38, 0x92, 0x58, 0x8d, 0xd2, 0x4d, 0xf0,
	0xd0, 0x20, 0x0a, 0x4f, 0x50, 0x6c, 0xa8, 0xaf, 0x17, 0xcd, 0x2f, 0xdd, 0x5f, 0x1d, 0xce, 0xca,
	0xea, 0x5b, 0xad, 0xbd, 0x9f, 0x8a, 0x75, 0xeb, 0x3b, 0x90, 0xdd, 0x12, 0x77, 0xd7, 0xd0, 0xbd,
	0x0b, 0xc9, 0x73, 0x77, 0x70, 0x57, 0x77, 0x22, 0xbe, 0x1c, 0x0a, 0x76, 0xc8, 0x62, 0xe6, 0x02,
	0x96, 0x46, 0x50, 0x65, 0x50, 0x21, 0xdc, 0x0e, 0xb6, 0x1c, 0x97, 0x4f, 0x53, 0xaf, 0x14, 0xb5,
	0x7f, 0xe1, 0xa3, 0xa0, 0xf4, 0x84, 0xe4, 0xed, 0xd0, 0xfd, 0x4d, 0xa4, 0x1f, 0x4e, 0x53, 0x03,
	0xe3, 0x14, 0x54, 0xe1, 0x25, 0xf0, 0x13, 0x2e, 0xe3, 0xda, 0xbc, 0xe3, 0x28, 0x55, 0x1f, 0x55,
	0x7d, 0x22, 0x7e, 0x13, 0x0f, 0xae, 0xa5, 0xee, 0xde, 0x45, 0xb3, 0x3d, 0xc9, 0x48, 0x5f, 0x32,
	0xda, 0x43, 0xd5, 0x4c, 0xb5, 0x93, 0x58, 0x9b, 0xc1, 0xdd, 0x31, 0x76, 0x96, 0x01, 0xd5, 0x07,
	0xfd, 0xbe, 0x63, 0x9e, 0x36, 0xe5, 0xb0, 0x1c, 0x92, 0xdc, 0x52, 0x48, 0x82, 0x4f, 0x83, 0x12,
	0x5f, 0x2e, 0x32, 0x76, 0xaa, 0xc2, 0x76, 0x6e, 0xab, 0x7e, 0xe5, 0x8c, 0x9b, 0x11, 0x06, 0x68,
	0x03, 0xa5, 0xc7, 0x88, 0x2d, 0x69, 0x24, 0x3c, 0xa1, 0x0a, 0x8f, 0x72, 0xd5, 0x3a, 0xe7, 0xcd,
	0x48, 0xc6, 0x6a, 0x15, 0x22, 0xe5, 0x72, 0x36, 0xaa, 0xc2, 0xf3, 0xe0, 0x39, 0xae, 0xf0, 0x3c,
	0xfe, 0x29, 0xaa, 0xb7, 0xa0, 0xec, 0xf5, 0x4b, 0xee, 0xac, 0xe9, 0x29, 0x40, 0x1c, 0x0e, 0xa7,
	0xd6, 0x16, 0xd8, 0x8f, 0x18, 0x50, 0xde, 0xe2, 0xf1, 0xb5, 0x89, 0xf2, 0x3b, 0xb0, 0x1d, 0x6c,
	0x51, 0xe4, 0x77, 0x08, 0xba, 0x92, 0xa6, 0x37, 0x54, 0xe1, 0xd7, 0x5c, 0x75, 0x2a, 0xb6, 0x88,
	0x6f, 0xbd, 0x8b, 0x96, 0xc3, 0x68, 0xe0, 0x02, 0x0a, 0x2f, 0xf2, 0x87, 0x52, 0x0b, 0x67, 0xb5,
	0x9b, 0x4e, 0x2c, 0x25, 0xa3, 0x3d, 0x05, 0x8b, 0xf7, 0x57, 0x87, 0x93, 0x63, 0x73, 0x89, 0xe5,
	0x51, 0x3c, 0xdc, 0x8f, 0xe6, 0xa3, 0xf8, 0xc2, 0x9d, 0xf4, 0x85, 0xdb, 0xa8, 0xaf, 0x97, 0x46,
	0x04, 0xbe, 0x1c, 0xc1, 0x1f, 0xcf, 0x50, 0x11, 0x51, 0x3b, 0xc7, 0xe9, 0x50, 0x85, 0x5a, 0xf0,
	0x24, 0x97, 0x39, 0x9e, 0x07, 0xda, 0x3f, 0x94, 0x61, 0x9d, 0xd1, 0x38, 0xf8, 0x6a, 0xf8, 0xc8,
	0x19, 0x2b, 0xab, 0xc8, 0xef, 0xb0, 0x4e, 0x2b, 0xeb, 0x60, 0x3b, 0xd9, 0x0f, 0x4a, 0x41, 0x05,
	0x65, 0x57, 0x02, 0xb0, 0x9f, 0x31, 0xe2, 0xed, 0x50, 0x85, 0x20, 0x57, 0x8d, 0xce, 0x8f, 0xa0,
	0xe5, 0xb1, 0x1c, 0xde, 0x37, 0x0b, 0x08, 0xfb, 0xac, 0x89, 0xf8, 0xe8, 0x97, 0xdc, 0x21, 0x11,
	0xef, 0x4a, 0xf5, 0xdf, 0x7e, 0xc8, 0x9b, 0xc0, 0x46, 0x50, 0x2e, 0x07, 0x83, 0x07, 0xfd, 0x6e,
	0xea, 0x4a, 0xdb, 0xf8, 0xea, 0x5a, 0x3d, 0xe3, 0x1e, 0xa2, 0xe4, 0xa6, 0x6d, 0xaa, 0x50, 0xc5,
	0x55, 0xa6, 0xc7, 0x2e, 0xa6, 0x62, 0xb1, 0xe4, 0x95, 0x6e, 0x31, 0xc3, 0x0f, 0xf7, 0x82, 0x32,
	0x39, 0x18, 0x3c, 0xac, 0xb4, 0xe9, 0xb9, 0x6b, 0x87, 0x2a, 0x6c, 0xe3, 0xb6, 0x52, 0x46, 0x6a,
	0x22, 0x51, 0x67, 0x80, 0x67, 0x40, 0x49, 0xbb, 0xdf, 0xad, 0x98, 0x4b, 0x48, 0xbe, 0xd8, 0x5e,
	0x98, 0x2f, 0x9a, 0x5e, 0x57, 0x05, 0x91, 0xdb, 0xaa, 0xbb, 0x28, 0xb1, 0x31, 0xdf, 0x84, 0x07,
	0x22, 0xe8, 0xdc, 0x65, 0x14, 0x19, 0x4d, 0xad, 0x8d, 0xa1, 0xa9, 0x4b, 0xc6, 0xc5, 0x1a, 0x34,
	0x32, 0x9e, 0x71, 0xeb, 0x70, 0x2c, 0xb1, 0x72, 0xd5, 0xe8, 0xd3, 0x68, 0x36, 0x9a, 0x88, 0xdf,
	0x10, 0x02, 0x81, 0xbd, 0x22, 0x39, 0xd4, 0x39, 0x67, 0x52, 0x85, 0x59, 0x13, 0xb0, 0x73, 0x59,
	0xfd, 0x53, 0x7b, 0x51, 0xfd, 0x52, 0x7b, 0xad, 0x33, 0x99, 0x6b, 0xad, 0x33, 0x3a, 0x68, 0xfe,
	0xef, 0x0c, 0xfc, 0x2b, 0x63, 0x34, 0xe2, 0x3e, 0x2b, 0xab, 0x33, 0xb1, 0x4e, 0x6b, 0x1d, 0xfd,
	0x3a, 0xac, 0xb4, 0x69, 0x8b, 0x47, 0x5e, 0xd1, 0x56, 0xb5, 0xe3, 0x58, 0xa7, 0xf5, 0x8d, 0x33,
	0xac, 0xb1, 0x3c, 0x68, 0xeb, 0x99, 0x6f, 0x8d, 0x4b, 0x2f, 0x00, 0x1a, 0x59, 0x0a, 0x04, 0x34,
	0x8a, 0x21, 0xb3, 0x6b, 0x54, 0xfd, 0x53, 0x5b, 0xd1, 0x32, 0xb7, 0x46, 0x22, 0x7f, 0xf7, 0xb1,
	0x6e, 0x97, 0xf6, 0xe1, 0x76, 0xd5, 0x11, 0x30, 0xcd, 0x2d, 0x04, 0x17, 0x5f, 0x5f, 0x5b, 0x57,
	0x5b, 0x57, 0x4b, 0x48, 0x34, 0x9f, 0xb2, 0x4e, 0xeb, 0x19, 0xf6, 0xb8, 0x43, 0x5b, 0x3d, 0x41,
	0xc8, 0xc7, 0x79, 0xf2, 0x3f, 0xcf, 0x76, 0xee, 0xb3, 0xb2, 0x5a, 0xdc, 0x69, 0x9f, 0x76, 0x2d,
	0xd0, 0xec, 0x99, 0x02, 0xcc, 0x76, 0xfe, 0xb6, 0x93, 0xfd, 0xb8, 0x14, 0x54, 0x36, 0xfb, 0xde,
	0x96, 0x5d, 0xa1, 0xff, 0x7f, 0x50, 0xc1, 0xfa, 0x82, 0x22, 0x6c, 0x32, 0xa4, 0x9a, 0x2f, 0x2d,
	0xbf, 0xb6, 0x5c, 0xf9, 0xdd, 0x62, 0x90, 0x79, 0x50, 0xe1, 0xcd, 0x14, 0x9b, 0x92, 0xaf, 0x5e,
	0x6c, 0xce, 0x32, 0xd9, 0x12, 0x58, 0x4a, 0x5c, 0x7a, 0x4f, 0xd6, 0xa5, 0xb3, 0xea, 0xcb, 0x2b,
	0x82, 0xaf, 0xa8, 0xc2, 0x2f, 0xb8, 0xa7, 0xf0, 0xf4, 0x65, 0x3c, 0x3d, 0x45, 0xab, 0x80, 0x96,
	0x7a, 0x89, 0x4b, 0xe3, 0x2b, 0xfd, 0xc9, 0x9b, 0xf7, 0xd2, 0x53, 0x7d, 0x28, 0x32, 0xc0, 0xff,
	0xe8, 0xe5, 0xa3, 0x47, 0x5e, 0xd5, 0x35, 0x38, 0x3c, 0x81, 0xbb, 0x56, 0xd2, 0xe3, 0x6b, 0x68,
	0xf9, 0x5a, 0xfa, 0x62, 0x04, 0x0d, 0xdc, 0x49, 0xc4, 0x97, 0x1d, 0x75, 0xfc, 0x73, 0x99, 0xaa,
	0xf9, 0x75, 0xaa, 0xc4, 0x1f, 0x19, 0x55, 0x58, 0x63, 0xc0, 0x6f, 0xb8, 0x9c, 0xb9, 0xf9, 0x3d,
	0x46, 0x3c, 0x7a, 0xa6, 0x25, 0x50, 0x8d, 0x89, 0x6d, 0x9d, 0xc9, 0xd3, 0xfd, 0x3a, 0x93, 0x51,
	0xeb, 0x3a, 0x43, 0x54, 0xb3, 0xce, 0xe8, 0xe8, 0x78, 0x09, 0xbe, 0x59, 0x10, 0x3c, 0x0f, 0x17,
	0x14, 0x9b, 0xba, 0x72, 0x27, 0xfb, 0x85, 0x09, 0x80, 0x0c, 0xfe, 0xef, 0x5e, 0x56, 0x75, 0x9e,
	0x56, 0x85, 0x13, 0xe0, 0x10, 0x67, 0x50, 0xc1, 0x83, 0x6d, 0xb8, 0x59, 0xb2, 0xb3, 0xc1, 0x67,
	0xfe, 0xfb, 0x54, 0xd7, 0xc9, 0x7e, 0xbe, 0x05, 0x6c, 0xfb, 0x95, 0x14, 0x72, 0xbd, 0x25, 0x92,
	0x02, 0xfd, 0x7d, 0xb6, 0xf8, 0x92, 0x6c, 0xe1, 0x1c, 0x67, 0x54, 0xe1, 0x3d, 0x06, 0xb4, 0x70,
	0x05, 0x2a, 0xe3, 0xcd, 0xa9, 0xf9, 0x0f, 0xd2, 0x93, 0xbd, 0x94, 0x90, 0x58, 0x1e, 0x4a, 0xac,
	0xdc, 0x79, 0x98, 0x58, 0xe3, 0x5f, 0x84, 0x2f, 0x7c, 0xf5, 0x10, 0xeb, 0x64, 0xef, 0x54, 0x81,
	0xea, 0x3c, 0x44, 0xdf, 0xc1, 0xce, 0xe4, 0x3c, 0x03, 0x2a, 0x83, 0xb2, 0x57, 0x96, 0x14, 0xd9,
	0xe3, 0xd6, 0x8d, 0x4c, 0x6e, 0xbd, 0x03, 0x4f, 0x2c, 0xa0, 0xf0, 0x7b, 0x28, 0x7e, 0x36, 0x39,
	0x38, 0x80, 0xa7, 0x3f, 0x6e, 0xfe, 0x19, 0xff, 0x46, 0x96, 0x11, 0xa9, 0xc3, 0xed, 0x1d, 0xde,
	0x90, 0x47, 0xcc, 0x10, 0x12, 0xcb, 0x2a, 0x9e, 0xb8, 0x8a, 0x6e, 0x4e, 0xa2, 0xe9, 0x39, 0x6d,
	0x7e, 0x20, 0x13, 0x05, 0x5a, 0x9c, 0x4f, 0xf7, 0x87, 0x69, 0x0b, 0x8b, 0xa7, 0x97, 0x49, 0x06,
	0x1f, 0x42, 0xe1, 0x1b, 0x94, 0x2d, 0x7f, 0x83, 0x53, 0x07, 0xc4, 0x1c, 0x0e, 0xf8, 0x21, 0x03,
	0xb6, 0xe5, 0xaf, 0xeb, 0x43, 0x5b, 0x17, 0xa3, 0x0a, 0x9d, 0xdc, 0xee, 0x22, 0x6c, 0x35, 0xc9,
	0x95, 0x1e, 0xad, 0x87, 0x5f, 0x0d, 0xef, 0xfd, 0x5f, 0xc3, 0x2c, 0x00, 0x06, 0x5f, 0x02, 0x55,
	0xfa, 0x81, 0x24, 0xa6, 0xe8, 0xc4, 0xb8, 0x5b, 0x15, 0x76, 0x71, 0x8f, 0x15, 0xc0, 0xcc, 0x8d,
	0xb2, 0x06, 0x01, 0x18, 0x04, 0x80, 0x9e, 0xfd, 0xda, 0xe9, 0x80, 0x6c, 0x2e, 0xb7, 0x32, 0x35,
	0xa5, 0x4d, 0xa2, 0x2a, 0x1c, 0xe1, 0xb6, 0xea, 0xcd, 0xff, 0xad, 0x15, 0x74, 0x69, 0x88, 0xff,
	0x69, 0xdd, 0xfd, 0xd5, 0x28, 0xdd, 0x0d, 0x4f, 0xdd, 0xc6, 0x13, 0x0b, 0x56, 0xab, 0x43, 0xa3,
	0x4c, 0x5d, 0xc2, 0x2b, 0x51, 0xab, 0x35, 0x11, 0x5f, 0x49, 0x5d, 0xeb, 0xc6, 0x93, 0x31, 0xdd,
	0xc7, 0x88, 0x95, 0xf5, 0x90, 0x3a, 0x3b, 0x8c, 0x2f, 0xc6, 0x44, 0xc3, 0x29, 0x9a, 0xd5, 0x2b,
	0x82, 0x7e, 0x7f, 0xa8, 0x25, 0x37, 0x74, 0x9e, 0x54, 0x85, 0x10, 0x57, 0x4d, 0x03, 0x18, 0x5f,
	0x59, 0x4a, 0x4e, 0xcd, 0xa3, 0xbb, 0xe3, 0xbc, 0x84, 0xc2, 0x37, 0xf0, 0x64, 0x4c, 0xc9, 0xcc,
	0x50, 0x4b, 0xe8, 0xe2, 0x1c, 0xea, 0xeb, 0x4d, 0x46, 0x7b, 0x8c, 0xa1, 0x4e, 0x55, 0x99, 0x5a,
	0xeb, 0x3f, 0xe1, 0xf7, 0x76, 0xb4, 0x2b, 0x28, 0x32, 0x8a, 0xa6, 0xe7, 0xf4, 0x24, 0x44, 0x44,
	0x12, 0xf1, 0x9b, 0x89, 0xbb, 0x64, 0x04, 0x5a, 0xba, 0x93, 0x88, 0x8f, 0x24, 0xe2, 0x5d, 0x68,
	0x3e, 0x9a, 0x9c, 0x8a, 0xa3, 0xc8, 0xb0, 0x98, 0x05, 0x02, 0x6f, 0x31, 0xa0, 0xb2, 0x5d, 0x1f,
	0x80, 0x14, 0x73, 0x25, 0x69, 0x2c, 0xcc, 0xd9, 0xc6, 0xa2, 0x60, 0x42, 0x6a, 0xd2, 0xb2, 0x3f,
	0xb7, 0x87, 0x8e, 0x49, 0xa8, 0x3b, 0xba, 0xe1, 0xa4, 0xc4, 0xbf, 0x86, 0xaf, 0x2c, 0xe1, 0x91,
	0xf9, 0x54, 0xec, 0x2a, 0x25, 0xa0, 0x81, 0x85, 0x3c, 0x5c, 0xf7, 0xae, 0x27, 0xa3, 0x3d, 0x14,
	0x35, 0xbd, 0xb1, 0x36, 0x20, 0x0e, 0xad, 0xa1, 0xf0, 0x04, 0x8d, 0x52, 0xba, 0x19, 0x1e, 0x5f,
	0xc0, 0x23, 0xf3, 0xa8, 0x3b, 0x4a, 0x35, 0x2f, 0xe6, 0x50, 0x3a, 0xff, 0x61, 0x52, 0x85, 0xbf,
	0x99, 0xc0, 0xcb, 0x5c, 0x61, 0x26, 0xe1, 0xf7, 0x14, 0x27, 0x37, 0xfc, 0x59, 0x37, 0x5a, 0x0d,
	0x6f, 0x56, 0x8a, 0x2e, 0x9b, 0xe0, 0xb4, 0xe9, 0xa1, 0xfa, 0xee, 0xac, 0xc3, 0x6b, 0xa4, 0x63,
	0x0d, 0xf5, 0x8d, 0x52, 0x6b, 0xc3, 0x31, 0x9b, 0xab, 0x5e, 0xde, 0x6f, 0x73, 0x38, 0xe4, 0x46,
	0x5b, 0xa3, 0xdb, 0xb5, 0xdf, 0xb6, 0x9f, 0xdf, 0xff, 0x5c, 0x5d, 0xdd, 0xb1, 0xc6, 0x46, 0xbe,
	0xbe, 0x81, 0x34, 0xeb, 0x79, 0x6e, 0x9c, 0x95, 0xe4, 0x1b, 0xf8, 0xcd, 0x24, 0x0d, 0xde, 0xcb,
	0x3a, 0x59, 0x9f, 0x7c, 0xd2, 0xaa, 0x53, 0xf4, 0x45, 0xdd, 0xcb, 0x74, 0xb0, 0x19, 0xf3, 0x16,
	0xb5, 0xdc, 0x04, 0x44, 0x46, 0x91, 0x74, 0x6c, 0xd0, 0xb7, 0x54, 0xe4, 0xe0, 0x09, 0x39, 0x58,
	0x7b, 0x5a, 0x6a, 0xf7, 0x6a, 0x4c, 0x3f, 0xa7, 0x1d, 0x3b, 0x6b, 0x97, 0x43, 0x2e, 0xd2, 0xa6,
	0xff, 0xa5, 0x12, 0x54, 0x8b, 0x72, 0xc0, 0x1f, 0x0c, 0x7d, 0x5f, 0x7e, 0x37, 0x6f, 0xd6, 0x67,
	0xf3, 0x52, 0x3c, 0xcd, 0xa3, 0xbd, 0x8c, 0x2a, 0x74, 0x33, 0x9c, 0x15, 0x2d, 0x7e, 0x82, 0x07,
	0xaf, 0xa7, 0x66, 0x86, 0x93, 0x63, 0x97, 0xf1, 0xf8, 0x80, 0xd6, 0x94, 0x7f, 0x5b, 0x39, 0x7f,
	0xa9, 0x38, 0xe7, 0xd3, 0x5c, 0x1a, 0x61, 0x54, 0x61, 0x98, 0xe1, 0x9e, 0xd9, 0x0c, 0xeb, 0xb7,
	0x58, 0x03, 0x7e, 0x97, 0xcd, 0xe1, 0x9e, 0x76, 0x9a, 0xc3, 0x2b, 0x9b, 0x0e, 0xa8, 0xc2, 0x8b,
	0x1c, 0xa4, 0xe0, 0xa8, 0x9b, 0x52, 0xa7, 0xe2, 0x9f, 0xa6, 0xb4, 0xa0, 0x81, 0xb6, 0xcf, 0xca,
	0xd7, 0x39, 0x1a, 0x6d, 0x75, 0x0d, 0x36, 0xbe, 0xd1, 0xea, 0xa8, 0x77, 0x3a, 0x1a, 0x9c, 0x3c,
	0x2f, 0x1a, 0xf6, 0x84, 0xce, 0xcc, 0x09, 0xa4, 0x21, 0xa8, 0x20, 0x55, 0x82, 0xbc, 0x2c, 0x3e,
	0xa6, 0xef, 0x4d, 0x34, 0x93, 0xeb, 0x05, 0x0c, 0xdc, 0xf0, 0x05, 0x62, 0x7f, 0xbf, 0xe4, 0xd6,
	0x3a, 0x82, 0x4a, 0x02, 0xee, 0x07, 0xaa, 0x60, 0xe1, 0xcc, 0xc5, 0xa2, 0x34, 0x4b, 0x8a, 0x39,
	0x7e, 0xe7, 0x17, 0x26, 0x55, 0xf8, 0xa7, 0x09, 0x84, 0xb8, 0xc2, 0x88, 0xe3, 0xf3, 0xc4, 0x13,
	0xf1, 0x73, 0xf8, 0xdc, 0x43, 0x4e, 0x4a, 0x86, 0xfb, 0xad, 0x33, 0x3b, 0x73, 0x80, 0xb3, 0x87,
	0xf3, 0xff, 0x62, 0xe0, 0x17, 0xcc, 0xd7, 0x9a, 0xa2, 0xbe, 0xa1, 0xd4, 0x58, 0xd7, 0xfa, 0x7c,
	0xbd, 0x54, 0xdf, 0xd8, 0x60, 0x93, 0x1b, 0x5d, 0x0e, 0x2a, 0xd9, 0xe0, 0xe2, 0x9f, 0xdd, 0x28,
	0x35, 0xea, 0x37, 0xd2, 0xa4, 0x36, 0x30, 0x6a, 0x8e, 0xc9, 0x90, 0xcf, 0xb3, 0x17, 0x66, 0x9d,
	0xec, 0xd1, 0xd7, 0x0f, 0x1e, 0x3c, 0x74, 0xf4, 0x28, 0xdb, 0xc9, 0xfe, 0xdb, 0x04, 0xb6, 0xe7,
	0xeb, 0xfc, 0xbb, 0x3b, 0xe3, 0x15, 0x29, 0x62, 0x23, 0xef, 0xfb, 0x66, 0x67, 0x3c, 0xfe, 0xf3,
	0x12, 0x50, 0xd1, 0xec, 0x53, 0x42, 0x92, 0xcf, 0x25, 0xc3, 0x77, 0x19, 0x50, 0xd2, 0xe2, 0xf1,
	0xb5, 0xc1, 0xdc, 0xe3, 0x9d, 0xfe, 0xf8, 0x69, 0xd9, 0x51, 0x40, 0x51, 0x02, 0xec, 0xeb, 0xaa,
	0xf0, 0x3c, 0xdc, 0x95, 0x1a, 0x5d, 0x44, 0xe1, 0x09, 0x25, 0xef, 0xfd, 0x99, 0xc4, 0x97, 0xe5,
	0xc1, 0x4b, 0xef, 0xfe, 0x39, 0x71, 0xde, 0xf4, 0x38, 0xbb, 0xc3, 0x7e, 0xc2, 0x61, 0xf7, 0xe8,
	0x87, 0xdb, 0x03, 0x1e, 0x5f, 0x9b, 0x93, 0xe1, 0x34, 0x10, 0x65, 0x74, 0xd8, 0x85, 0xb0, 0xf8,
	0xc1, 0xc5, 0xb2, 0xb3, 0x88, 0xa6, 0x04, 0xd8, 0x23, 0xaa, 0x50, 0x0b, 0x61, 0xe6, 0xe5, 0x3d,
	0x37, 0x1c, 0x5b, 0xcc, 0xc5, 0x34, 0x03, 0x04, 0x33, 0xbb, 0x33, 0x0f, 0x82, 0x87, 0xec, 0xa8,
	0x81, 0x38, 0xcf, 0x80, 0x2a, 0x43, 0xaf, 0x03, 0x9f, 0xc8, 0x9e, 0x9a, 0x3f, 0xdd, 0x59, 0xcc,
	0x1b, 0x2f, 0x50, 0x4c, 0x35, 0x10, 0xd2, 0xfe, 0x28, 0x68, 0xe8, 0x8f, 0x2c, 0x1b, 0xd0, 0x08,
	0x9a, 0x3d, 0xec, 0xae, 0x3c, 0x34, 0x27, 0xb5, 0x0d, 0x6d, 0x94, 0xcd, 0xc9, 0x70, 0x75, 0x0c,
	0x1c, 0x67, 0xc0, 0x56, 0xa3, 0x8f, 0xc0, 0xdc, 0xe9, 0x05, 0x79, 0xcb, 0xb2, 0xeb, 0x01, 0x2b,
	0x4a, 0x80, 0x6d, 0x21, 0xc0, 0xa8, 0x37, 0xe9, 0x8d, 0x1b, 0x35, 0xd8, 0x06, 0x34, 0x02, 0xec,
	0x87, 0xac, 0x25, 0x0f, 0x58, 0x90, 0xec, 0x98, 0x43, 0xd6, 0xd4, 0xae, 0x0a, 0x6f, 0x43, 0x01,
	0x34, 0xa4, 0xce, 0xbf, 0x9f, 0xfe, 0x24, 0x8e, 0xa7, 0x47, 0xd0, 0xb9, 0x19, 0xfd, 0xd7, 0x80,
	0xa5, 0x4f, 0x51, 0x78, 0x41, 0x7f, 0xc6, 0xb5, 0x66, 0x1c, 0xcd, 0x2a, 0xb4, 0x34, 0xa7, 0x62,
	0xb7, 0xf1, 0xe4, 0x28, 0x9e, 0xe8, 0xc7, 0x33, 0x7f, 0xe0, 0x4b, 0xc9, 0xdb, 0x26, 0xc7, 0x30,
	0xfc, 0x76, 0x29, 0x10, 0xf0, 0x7a, 0x5c, 0xe4, 0x47, 0x3c, 0xfb, 0xdb, 0x8a, 0xdf, 0xe7, 0x2c,
	0xa2, 0xb4, 0x96, 0x91, 0xdf, 0xf6, 0x9e, 0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xbe,
	0x05, 0xdb, 0x70, 0x1c, 0x00, 0x00,
}
